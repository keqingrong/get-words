HOME
ARCHIVE
The
smallest
possible
valid
X
HTML
internal
character
encoding
UCS-
or
UTF-
JavaScript
character
escape
sequences
Published
st
December
tagged
with
JavaScript
Unicode
Having
recently
written
about
character
references
in
HTML
and
escape
sequences
in
CSS
I
figured
it
would
be
interesting
to
look
into
JavaScript
character
escapes
as
well
Character
codes
code
points
and
code
units
A
code
point
also
known
as
character
code
is
a
numerical
representation
of
a
specific
Unicode
character
For
example
the
character
code
of
the
copyright
symbol
is
which
can
be
written
as
xA
in
hex
In
JavaScript
String
charCodeAt
can
be
used
to
get
the
numeric
Unicode
code
point
of
any
character
up
to
U
FFFF
i
e
the
character
with
code
point
xFFFF
which
is
in
decimal
Since
JavaScript
uses
UCS-
encoding
internally
higher
code
points
are
represented
by
a
pair
of
lower
valued
surrogate
pseudo-characters
which
are
used
to
comprise
the
real
character
To
get
the
actual
character
code
of
these
higher
code
point
characters
in
JavaScript
have
to
do
some
extra
work
Basically
JavaScript
uses
code
units
rather
than
code
points
Now
out
of
the
way
take
a
look
at
the
different
types
of
character
escape
sequences
in
JavaScript
strings
Single
character
escape
sequences
There
are
some
reserved
single
character
escape
sequences
for
use
in
strings
b
backspace
U
BACKSPACE
f
form
feed
U
C
FORM
FEED
n
line
feed
U
A
LINE
FEED
r
carriage
return
U
D
CARRIAGE
RETURN
t
horizontal
tab
U
CHARACTER
TABULATION
v
vertical
tab
U
B
LINE
TABULATION
null
character
U
NULL
only
if
the
next
character
is
not
a
decimal
digit
else
an
octal
escape
sequence
single
quote
U
APOSTROPHE
double
quote
U
QUOTATION
MARK
backslash
U
C
REVERSE
SOLIDUS
All
single
character
escapes
can
easily
be
memorized
using
the
following
regular
expression
bfnrtv
Note
that
the
escape
character
makes
special
characters
literal
only
one
exception
to
this
rule
abc
def
abcdef
true
The
followed
by
a
new
line
is
not
a
character
escape
sequence
but
a
LineContinuation
The
new
line
become
part
of
the
string
This
is
simply
a
way
to
spread
a
string
over
multiple
lines
for
easier
code
editing
for
example
without
the
string
actually
including
any
new
line
characters
I
suppose
you
could
think
of
followed
by
a
new
line
as
an
escape
sequence
for
the
empty
string
Characters
without
special
meaning
can
be
escaped
as
well
e
g
a
a
but
this
is
of
course
not
needed
However
using
u
outside
of
a
Unicode
escape
sequence
or
x
outside
of
a
hexadecimal
escape
is
disallowed
by
the
specification
and
causes
some
engines
to
throw
a
syntax
error
Note
IE
treats
v
as
v
instead
of
a
vertical
tab
x
B
If
cross-browser
compatibility
is
a
concern
use
x
B
instead
of
v
Another
thing
to
note
is
that
the
v
and
escapes
are
not
allowed
in
JSON
strings
Octal
escape
sequences
Any
character
with
a
character
code
lower
than
i
e
any
character
in
the
extended
ASCII
range
can
be
escaped
using
its
octal-encoded
character
code
prefixed
with
Note
that
this
is
the
same
range
of
characters
that
can
be
escaped
through
hexadecimal
escapes
To
use
the
same
example
the
copyright
symbol
has
character
code
which
gives
in
octal
notation
so
you
could
write
it
as
Octal
escapes
can
consist
of
two
three
of
four
characters
and
are
equivalent
zero
padding
is
not
required
However
if
the
octal
escape
e
g
is
part
of
a
larger
string
and
immediately
followed
by
a
character
in
the
range
e
g
the
next
character
will
be
considered
part
of
the
escape
sequence
until
at
most
three
digits
are
matched
In
other
words
a
single
octal
character
escape
equivalent
to
is
not
the
same
as
an
octal
escape
followed
by
an
unescaped
character
By
simply
zero
padding
octal
escapes
you
can
avoid
this
problem
Note
that
one
exception
here
by
itself
is
not
an
octal
escape
sequence
It
looks
like
one
and
even
equal
to
and
both
of
which
are
octal
escape
sequences
but
unless
followed
by
a
decimal
digit
it
acts
like
a
single
character
escape
sequence
Or
in
spec
lingo
EscapeSequence
lookahead
DecimalDigit
probably
easiest
to
define
octal
escape
syntax
using
the
following
regular
expression
Note
that
octal
escapes
have
been
deprecated
in
ES
Past
editions
of
ECMAScript
have
included
additional
syntax
and
semantics
for
specifying
octal
literals
and
octal
escape
sequences
These
have
been
removed
from
this
edition
of
ECMAScript
This
non-normative
annex
presents
uniform
syntax
and
semantics
for
octal
literals
and
octal
escape
sequences
for
compatibility
with
some
older
ECMAScript
programs
Additionally
they
produce
syntax
errors
in
strict
mode
A
conforming
implementation
when
processing
strict
mode
code
see
may
not
extend
the
syntax
of
EscapeSequence
to
include
OctalEscapeSequence
as
described
in
B
disallowed
in
template
literals
as
well
TL
DR
use
octal
escapes
use
hexadecimal
escapes
instead
Hexadecimal
escape
sequences
Any
character
with
a
character
code
lower
than
i
e
any
character
in
the
extended
ASCII
range
can
be
escaped
using
its
hex-encoded
character
code
prefixed
with
x
Note
that
this
is
the
same
range
of
characters
that
can
be
escaped
through
octal
escapes
Hexadecimal
escapes
are
four
characters
long
They
require
exactly
two
characters
following
x
If
the
hexadecimal
character
code
is
only
one
character
long
this
is
the
case
for
all
character
codes
smaller
than
or
in
hex
need
to
pad
it
with
a
leading
For
example
the
copyright
symbol
has
character
code
which
gives
A
in
hex
so
you
could
write
it
as
xA
The
hexadecimal
part
of
this
escape
is
case-insensitive
in
other
words
xa
and
xA
are
equivalent
You
could
define
hexadecimal
escape
syntax
using
the
following
regular
expression
x
a-fA-F
a
bit
confusing
that
the
spec
refers
to
this
kind
of
escape
sequence
as
hexadecimal
since
Unicode
escapes
use
hex
as
well
Unicode
escape
sequences
Any
character
with
a
character
code
lower
than
can
be
escaped
using
the
hexadecimal
value
of
its
character
code
prefixed
with
u
As
mentioned
before
higher
character
codes
are
represented
by
a
pair
of
surrogate
characters
Unicode
escapes
are
six
characters
long
They
require
exactly
four
characters
following
u
If
the
hexadecimal
character
code
is
only
one
two
or
three
characters
long
need
to
pad
it
with
leading
zeroes
The
copyright
symbol
has
character
code
which
gives
A
in
hexadecimal
notation
so
you
could
write
it
as
u
A
Similarly
could
be
written
as
u
The
hexadecimal
part
of
this
kind
of
character
escape
is
case-insensitive
in
other
words
u
a
and
u
A
are
equivalent
You
could
define
Unicode
escape
syntax
using
the
following
regular
expression
u
a-fA-F
Note
Other
than
a
few
simple
escapes
Unicode
escapes
are
the
only
ones
allowed
by
the
JSON
specification
ECMAScript
Unicode
code
point
escapes
ECMAScript
introduces
a
new
kind
of
escape
sequence
in
strings
namely
Unicode
code
point
escapes
Additionally
it
will
define
String
fromCodePoint
and
String
codePointAt
both
of
which
accept
code
points
rather
than
UCS-
UTF-
code
units
When
this
is
implemented
any
character
can
be
escaped
using
the
hexadecimal
value
of
its
character
code
prefixed
with
u
and
suffixed
with
This
is
allowed
for
code
points
up
to
x
FFFF
which
is
the
highest
code
point
defined
by
Unicode
Unicode
code
point
escapes
consist
of
at
least
five
characters
At
least
one
hexadecimal
character
can
be
wrapped
in
u
There
is
no
upper
limit
on
the
number
of
hex
digits
in
use
for
example
u
a
but
for
practical
purposes
you
need
more
than
unless
you
perform
unnecessary
zero-padding
The
tetragram
for
centre
symbol
has
code
point
U
D
so
you
could
write
it
as
u
D
For
comparison
if
you
were
to
use
simple
Unicode
escapes
to
represent
this
symbol
have
to
write
out
the
surrogate
halves
separately
uD
uDF
The
hexadecimal
part
of
this
kind
of
character
escape
is
case-insensitive
in
other
words
u
d
and
u
D
are
equivalent
You
could
define
Unicode
code
point
escape
syntax
using
the
following
regular
expression
u
a-fA-F
Control
escape
sequences
In
regular
expressions
not
in
strings
any
character
with
a
character
code
greater
than
and
lower
than
can
be
escaped
using
its
caret
notation
character
prefixed
with
c
Control
escapes
are
three
characters
long
They
require
exactly
one
character
following
c
For
example
U
A
LINE
FEED
is
J
in
caret
notation
because
x
A
and
J
is
the
th
letter
of
the
alphabet
So
a
valid
regular
expression
that
matches
this
symbol
would
be
cJ
e
g
cJ
test
n
true
The
caret
notation
character
following
c
in
this
kind
of
character
escape
is
case-insensitive
in
other
words
cJ
and
cj
are
equivalent
a
list
of
all
the
available
control
escape
sequences
and
the
control
characters
they
map
to
Escape
sequence
Unicode
code
point
cA
or
ca
U
START
OF
HEADING
cB
or
cb
U
START
OF
TEXT
cC
or
cc
U
END
OF
TEXT
cD
or
cd
U
END
OF
TRANSMISSION
cE
or
ce
U
ENQUIRY
cF
or
cf
U
ACKNOWLEDGE
cG
or
cg
U
BELL
cH
or
ch
U
BACKSPACE
cI
or
ci
U
CHARACTER
TABULATION
cJ
or
cj
U
A
LINE
FEED
LF
cK
or
ck
U
B
LINE
TABULATION
cL
or
cl
U
C
FORM
FEED
FF
cM
or
cm
U
D
CARRIAGE
RETURN
CR
cN
or
cn
U
E
SHIFT
OUT
cO
or
co
U
F
SHIFT
IN
cP
or
cp
U
DATA
LINK
ESCAPE
cQ
or
cq
U
DEVICE
CONTROL
ONE
cR
or
cr
U
DEVICE
CONTROL
TWO
cS
or
cs
U
DEVICE
CONTROL
THREE
cT
or
ct
U
DEVICE
CONTROL
FOUR
cU
or
cu
U
NEGATIVE
ACKNOWLEDGE
cV
or
cv
U
SYNCHRONOUS
IDLE
cW
or
cw
U
END
OF
TRANSMISSION
BLOCK
cX
or
cx
U
CANCEL
cY
or
cy
U
END
OF
MEDIUM
cZ
or
cz
U
A
SUBSTITUTE
You
could
define
control
escape
syntax
using
the
following
regular
expression
c
a-zA-Z
A
tool
for
character
escapes
I
wrote
a
JavaScript
string
escaper
that
combines
these
different
kinds
of
escapes
except
the
deprecated
octal
escapes
and
returns
the
smallest
possible
result
string
Try
it
at
mothereff
in
js-escapes
JavaScript
escapes
tool
You
can
use
it
to
escape
any
character
but
an
option
to
only
escape
non-ASCII
and
unprintable
ASCII
characters
which
is
probably
the
most
useful
This
way
you
can
easily
turn
strings
such
as
Ich
B
cher
into
its
smallest
possible
ASCII-only
equivalent
Ich
u
B
xFCcher
Back
when
I
was
working
on
Punycode
js
unit
tests
this
tool
saved
me
quite
some
time
Need
to
escape
strings
in
your
JavaScript
app
The
JavaScript
library
that
powers
this
tool
is
available
on
GitHub
About
me
Hi
there
Mathias
I
work
on
V
at
Google
HTML
CSS
JavaScript
Unicode
performance
and
security
get
me
excited
If
you
managed
to
read
this
far
without
falling
asleep
you
should
follow
me
on
Twitter
and
GitHub
Comments
pomeh
wrote
on
th
December
at
Thanks
Mathias
This
is
awesome
Deian
wrote
on
th
December
at
You
are
one
of
the
most
REALLY
useful
developers
around
Thank
you
for
all
of
your
articles
Mathias
Wish
you
a
Merry
Christmas
Happy
New
Year
mario
wrote
on
th
August
at
Visual
Basic
Script
allows
to
use
yet
another
form
of
escape
to
represent
decimal
numbers
Hxx
or
hxx
represents
numeric
values
Hexa-decimal
Oxxx
or
oxxx
represents
numeric
values
Octal
xxx
or
xxx
represents
numeric
values
Octal
no
O
is
required
Thiemo
wrote
on
st
May
at
I
did
something
very
similar
as
a
byt
es
entry
once
http
maettig
com
code
javascript
encode-javascript-string-in-
byt
es
html
Nils
wrote
on
rd
August
at
What
if
I
need
to
insert
itself
into
the
string
i
e
not
using
it
as
escape
character
lost
Tried
but
the
compiler
just
leaves
it
that
way
Update
Sorry
I
forgot
to
mention
the
language
JS
using
JSON
trying
to
add
data
to
a
Google
Sheet
cell
through
a
modified
function
Mathias
wrote
on
rd
August
at
Nils
Use
Flimm
wrote
on
th
September
at
If
you
re
not
careful
to
add
the
padding
in
regexes
it
can
act
strangely
u
u
f
test
a
b
returns
true
u
u
f
test
a
b
returns
false
for
some
reason
Mathias
wrote
on
th
September
at
Flimm
The
padding
is
required
not
just
in
regular
expressions
but
everywhere
u
and
u
f
are
not
valid
escape
sequences
Stan
wrote
on
th
November
at
Thanks
I
was
trying
to
get
encoded
using
x
and
figure
out
why
it
working
until
I
saw
that
hex
codes
only
work
to
xFF
and
that
I
needed
to
use
u
Leave
a
comment
Name
Email
Website
Your
input
will
be
parsed
as
Markdown
Mathias
Bynens