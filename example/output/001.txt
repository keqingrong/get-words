React
Docs
Tutorial
Community
Blog
Search
docs
v
GitHub
React
A
JavaScript
library
for
building
user
interfaces
Get
Started
Take
the
Tutorial
Declarative
React
makes
it
painless
to
create
interactive
UIs
Design
simple
views
for
each
state
in
your
application
and
React
will
efficiently
update
and
render
just
the
right
components
when
your
data
changes
Declarative
views
make
your
code
more
predictable
and
easier
to
debug
Component-Based
Build
encapsulated
components
that
manage
their
own
state
then
compose
them
to
make
complex
UIs
Since
component
logic
is
written
in
JavaScript
instead
of
templates
you
can
easily
pass
rich
data
through
your
app
and
keep
state
out
of
the
DOM
Learn
Once
Write
Anywhere
We
make
assumptions
about
the
rest
of
your
technology
stack
so
you
can
develop
new
features
in
React
without
rewriting
existing
code
React
can
also
render
on
the
server
using
Node
and
power
mobile
apps
using
React
Native
A
Simple
Component
React
components
implement
a
render
method
that
takes
input
data
and
returns
what
to
display
This
example
uses
an
XML-like
syntax
called
JSX
Input
data
that
is
passed
into
the
component
can
be
accessed
by
render
via
this
props
JSX
is
optional
and
not
required
to
use
React
Try
the
Babel
REPL
to
see
the
raw
JavaScript
code
produced
by
the
JSX
compilation
step
LIVE
JSX
EDITOR
JSX
class
HelloMessage
extends
React
Component
render
return
div
Hello
this
props
name
div
ReactDOM
render
HelloMessage
name
Taylor
mountNode
RESULT
Hello
Taylor
A
Stateful
Component
In
addition
to
taking
input
data
accessed
via
this
props
a
component
can
maintain
internal
state
data
accessed
via
this
state
When
a
state
data
changes
the
rendered
markup
will
be
updated
by
re-invoking
render
LIVE
JSX
EDITOR
JSX
class
Timer
extends
React
Component
constructor
props
super
props
this
state
seconds
tick
this
setState
prevState
seconds
prevState
seconds
componentDidMount
this
interval
setInterval
this
tick
componentWillUnmount
clearInterval
this
interval
render
return
div
Seconds
this
state
seconds
div
ReactDOM
render
Timer
mountNode
RESULT
Seconds
An
Application
Using
props
and
state
we
can
put
together
a
small
Todo
application
This
example
uses
state
to
track
the
current
list
of
items
as
well
as
the
text
that
the
user
has
entered
Although
event
handlers
appear
to
be
rendered
inline
they
will
be
collected
and
implemented
using
event
delegation
LIVE
JSX
EDITOR
JSX
class
TodoApp
extends
React
Component
constructor
props
super
props
this
state
items
text
this
handleChange
this
handleChange
bind
this
this
handleSubmit
this
handleSubmit
bind
this
render
return
div
h
TODO
h
TodoList
items
this
state
items
form
onSubmit
this
handleSubmit
label
htmlFor
new-todo
What
needs
to
be
done
label
input
id
new-todo
onChange
this
handleChange
value
this
state
text
button
Add
this
state
items
length
button
form
div
handleChange
e
this
setState
text
e
target
value
handleSubmit
e
e
preventDefault
if
this
state
text
length
return
const
newItem
text
this
state
text
id
Date
now
this
setState
prevState
items
prevState
items
concat
newItem
text
class
TodoList
extends
React
Component
render
return
ul
this
props
items
map
item
li
key
item
id
item
text
li
ul
ReactDOM
render
TodoApp
mountNode
RESULT
TODO
What
needs
to
be
done
Add
A
Component
Using
External
Plugins
React
is
flexible
and
provides
hooks
that
allow
you
to
interface
with
other
libraries
and
frameworks
This
example
uses
remarkable
an
external
Markdown
library
to
convert
the
textarea
value
in
real
time
LIVE
JSX
EDITOR
JSX
class
MarkdownEditor
extends
React
Component
constructor
props
super
props
this
handleChange
this
handleChange
bind
this
this
state
value
Hello
world
handleChange
e
this
setState
value
e
target
value
getRawMarkup
const
md
new
Remarkable
return
html
md
render
this
state
value
render
return
div
className
MarkdownEditor
h
Input
h
label
htmlFor
markdown-content
Enter
some
markdown
label
textarea
id
markdown-content
onChange
this
handleChange
defaultValue
this
state
value
h
Output
h
div
className
content
dangerouslySetInnerHTML
this
getRawMarkup
div
ReactDOM
render
MarkdownEditor
mountNode
RESULT
Input
Enter
some
markdown
Hello
world
Output
Hello
world
Get
Started
Take
the
Tutorial
DOCS
Installation
Quick
Start
Advanced
Guides
Reference
Contributing
FAQ
CHANNELS
GitHub
Stack
Overflow
Discussion
Forum
Reactiflux
Chat
Facebook
Twitter
COMMUNITY
Community
Resources
Tools
MORE
Tutorial
Blog
Acknowledgements
React
Native
Facebook
Open
Source
Copyright
Facebook
Inc